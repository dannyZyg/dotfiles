echo "Hello from .zshrc"

stty stop undef # Stops Ctrl-s from freezing the terminal

unsetopt BEEP

export COLORTERM=truecolor
export EDITOR=nvim
export TMUX_CONFIG="$HOME/.config/tmux/.tmux.conf"
export TEMP_DIR="/tmp"

# removes auto highlight on paste
zle_highlight=('paste:none')

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

DOTFILES_DIR="$HOME/.dotfiles"
[ -f "$DOTFILES_DIR/aliases.sh" ] && source "$DOTFILES_DIR/aliases.sh"
[ -f "$DOTFILES_DIR/functions.sh" ] && source "$DOTFILES_DIR/functions.sh"

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

zsh_add_plugin "zsh-users/zsh-autosuggestions"
zsh_add_plugin "zsh-users/zsh-syntax-highlighting"
zsh_add_plugin "hlissner/zsh-autopair"

source $ZDOTDIR/zsh-prompt
source $ZDOTDIR/zsh-vim-mode

# TODO: Keep an eye out for a different `--no-quarantine` solution.
# Currently, you can't do `brew bundle --no-quarantine` as an option.
# https://github.com/Homebrew/homebrew-bundle/issues/474
export HOMEBREW_CASK_OPTS="--no-quarantine --no-binaries"

# Handle Mac architectures and brew paths
if [[ "$OSTYPE" == "darwin"* ]]; then
	CPU=$(uname -p)
	if [[ "$CPU" == "arm" ]]; then
		export BREWPATH="/opt/homebrew/bin"
		export PATH="$BREWPATH:$PATH"
	else
		export BREWPATH="/usr/local/bin"
		export PATH="$BREWPATH:$PATH"
	fi
	export PATH=$(brew --prefix)/opt/llvm/bin/:$PATH
fi

export TERM=xterm-256color
export EDITOR=nvim
export TMUX_CONFIG="$HOME/.config/tmux/.tmux.conf"
export TEMP_DIR="/tmp"
export N_PREFIX="$HOME/.config/n"

export PATH="$N_PREFIX/bin:$PATH"

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
# [[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh
# source $(brew --prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme

[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

############### ############## ############## ##############

[ -f ~/packages/fzf/shell/completion.zsh ] && source ~/packages/fzf/shell/completion.zsh
[ -f ~/packages/fzf/shell/key-bindings.zsh ] && source ~/packages/fzf/shell/key-bindings.zsh

HISTSIZE=99999
HISTFILESIZE=999999
SAVEHIST=$HISTSIZE
HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select

zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# # Use lf to switch directories and bind it to ctrl-o
# lfcd () {
#     tmp="$(mktemp)"
#     lf -last-dir-path="$tmp" "$@"
#     if [ -f "$tmp" ]; then
#         dir="$(cat "$tmp")"
#         rm -f "$tmp"
#         [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
#     fi
# }
# bindkey -s '^o' 'lfcd\n'

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true

# Added by serverless binary installer
export PATH="$HOME/.serverless/bin:$PATH"

export ANKI_DIR="~/Library/Application\ Support/Anki2"
export ANKI_PROFILE="danny"

# # python penv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init --path)"
	eval "$(pyenv virtualenv-init -)"
	. ~/.pyenv/versions/3.9.1/bin/virtualenvwrapper.sh
fi

export PATH="$HOME/.poetry/bin:$PATH"

# virtualenvwrapper
export WORKON_HOME=~/.virtualenvs
if [ ! -d "$WORKON_HOME" ]; then mkdir -p $WORKON_HOME; fi

[ -f "$HOME/scripts/aws/aws.sh" ] && source "$HOME/scripts/aws/aws.sh"

jdk() {
	version=$1
	export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
	java -version
 }

export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

[ -f "/Users/dannykeig/.ghcup/env" ] && source "/Users/dannykeig/.ghcup/env" # ghcup-env

eval "$(starship init zsh)"
