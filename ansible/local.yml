- hosts: localhost

  gather_facts: True

  pre_tasks:
    - name: Set miniconda path
      set_fact:
        conda_path: "{{ lookup('env', 'HOME') }}/.config/miniconda"
      tags:
        - always

    - name: Set espanso path on Linux
      set_fact:
        espanso_path: "{{ lookup('env', 'HOME') }}/.config/espanso"
      when: ansible_system == "Linux"
      tags:
        - always

    - name: Set espanso path on MacOSX
      set_fact:
        espanso_path: "{{ lookup('env', 'HOME') }}/Library/Application Support/espanso"
      when: ansible_distribution == 'MacOSX'
      tags:
        - always

    - name: Set brew path on MacOSX silicon
      set_fact:
        brew_path: "/opt/homebrew/bin"
      when: ansible_distribution == 'MacOSX' and ansible_architecture == 'arm64'
      tags:
        - always

    - name: Set brew path on MacOSX intel
      set_fact:
        brew_path: "/usr/local/bin"
      when: ansible_distribution == 'MacOSX' and ansible_architecture == 'x86_64'
      tags:
        - always

    - name: Set miniconda url on Linux
      set_fact:
        miniconda_url: >
          https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
      when: ansible_system == "Linux"
      tags:
        - always

    - name: Set Bitwig extensions dir on Linux
      set_fact:
        bitwig_extensions_dir: "{{ lookup('env', 'HOME') }}/Bitwig Studio/Extensions"
      when: ansible_system == "Linux"
      tags:
        - always

    - name: Set Bitwig extensions dir on Linux
      set_fact:
        bitwig_extensions_dir: "{{ lookup('env', 'HOME') }}/Documents/Bitwig Studio/Extensions"
      when: ansible_distribution == 'MacOSX'
      tags:
        - always

    - name: Set miniconda url on Mac
      set_fact:
        miniconda_url: >
          https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-MacOSX-x86_64.sh
      when: ansible_distribution == 'MacOSX' and ansible_architecture == 'x86_64'
      tags:
        - always

    - name: Get the username running the deploy
      become: false
      local_action: command whoami
      register: result
      tags:
        - debug
        - always

    - name: Set the username env var
      set_fact:
        username: "{{ result.stdout }}"
      tags:
        - debug
        - always

    - name: Update repositories
      when: ansible_facts['distribution'] == "Archlinux"
      become: true
      pacman:
        update_cache: yes
      tags:
        - pacman
        - aur
        - packages

    - name: update repositories
      when: ansible_facts['os_family'] == "Debian"
      apt: update_cache=yes
      become: true
      changed_when: False
      tags:
        - packages
        - apt

  tasks:
    - name: Load debug tasks
      import_tasks: tasks/debug.yml

    - name: Download fonts for Linux
      import_tasks: tasks/env/fonts.yml
      when: ansible_system == "Linux"

    # Setup environmnet
    - name: Setup dotfiles
      import_tasks: tasks/env/dotfiles.yml
    - name: Setup shell
      import_tasks: tasks/env/shell.yml
    - name: Install starship
      import_tasks: tasks/package/starship.yml

    - name: Build neovim
      import_tasks: tasks/package/nvim.yml

    # Install from package managers
    # Debian
    - name: Install apt packages
      import_tasks: tasks/package/apt-packages.yml
      when: ansible_facts['os_family'] == "Debian"

    # Arch
    - name: Install pacman packages
      import_tasks: tasks/package/pacman-packages.yml
      when: ansible_facts['distribution'] == "Archlinux"
    - name: Install AUR packages
      import_tasks: tasks/package/aur.yml
      when: ansible_facts['distribution'] == "Archlinux"

    # All Linux
    - name: Install flatpak packages
      import_tasks: tasks/package/flatpak-packages.yml
      when: ansible_system == "Linux"

    # MacOS
    - name: Install homebrew packages
      import_tasks: tasks/package/homebrew-packages.yml
      when: ansible_distribution == 'MacOSX'

    # Install/build packages manually
    - name: Install brillo
      import_tasks: tasks/package/brillo.yml
    - name: Install anki
      import_tasks: tasks/package/anki.yml
    - name: Install driven by moss
      import_tasks: tasks/package/driven-by-moss.yml

    - name: Decrypt espanso config
      import_tasks: tasks/service/espanso.yml

    # Start services
    - name: Start Syncthing
      import_tasks: tasks/service/syncthing.yml
    - name: Start Docker on Linux
      import_tasks: tasks/service/docker.yml
      when: ansible_system == "Linux"
    - name: Start bluetooth on Linux
      import_tasks: tasks/service/bluetooth.yml
      when: ansible_system == "Linux"

    # Install languages and tools
    - name: Install node
      import_tasks: tasks/lang/node.yml
    - name: Install npm packages
      import_tasks: tasks/lang/npm-packages.yml
    - name: Install miniconda
      import_tasks: tasks/lang/miniconda.yml
    - name: Install python extras
      import_tasks: tasks/lang/python.yml
    - name: Install pipx
      import_tasks: tasks/lang/pipx.yml
    - name: Install rust
      import_tasks: tasks/lang/rust.yml

    - name: Setup audio on Arch Linux
      import_tasks: tasks/root/audio.yml
      when: ansible_facts['distribution'] == "Archlinux"
